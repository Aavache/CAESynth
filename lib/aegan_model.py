# External libs
import os
import torch
import itertools
from collections import OrderedDict
import torch
import torch.nn as nn
from torch.autograd import Variable
# Internal libs
from .base_model import BaseModel
from . import networks
from . import network_utils as net_utils
from . import loss

class AEGANModel(BaseModel):
    """
    """
    def __init__(self, opt, is_train= True):
        """Initialize Autoencoder.

        Parameters:
            opt (dict)      - stores all the experiment flags; needs to be a subclass of BaseOptions
            is_train (bool) - Stage flag; {True: Training, False: Testing}
        """
        BaseModel.__init__(self, opt, is_train= True)

        # Instantiating networks
        self.AE = networks.instantiate_autoencoder(opt)
        self.AE.to(self.device)
        self.model_names = ['AE']

        if is_train:  # define discriminators
            # Specify the training losses you want to print out.
            self.loss_names = ['recon', 'g_gan', 'd_gan', 'gp']
            self.lambda_recon = opt['train']['lambda_recon']
            self.lambda_gan = opt['train']['lambda_gan']
            self.lambda_gp = opt['train']['lambda_gp']
            if self.lambda_recon == 0.0:
                self.loss_names.remove('recon')
            if self.lambda_gp == 0.0:
                self.loss_names.remove('gp')

            self.DISC = networks.instantiate_discriminator(opt)
            self.DISC.to(self.device)
            self.model_names += ['DISC']

            # Define loss functions
            if opt['train']['recon_mode'] == 'l1':
                self.criterion_recon = nn.L1Loss()
            else:
                self.criterion_recon = nn.MSELoss()
            self.criterion_gan = loss.GANLoss(opt['train']['gan_mode'], self.device)

            # Initialize optimizers
            self.optimizer_AE = torch.optim.Adam(self.AE.parameters(), lr=opt['train']['lr'], betas=(opt['train']['beta1'], 0.999))
            self.optimizer_DISC = torch.optim.Adam(self.DISC.parameters(), lr=opt['train']['lr'], betas=(opt['train']['beta1'], 0.999))

            if opt['train'].get('load', False):
                self.load_networks(opt['train'].get('load_suffix', 'latest'))
                print('Network Loaded!')
    
    def set_input(self, data):
        # Reference sample for both pitch and timbre
        self.data = data['data'].to(self.device)

    def forward(self):
        """Run forward pass"""
        self.recon,  self.latent = self.AE(self.data)

    def backward_DISC_basic(self, DISC, real, fake):
        """Calculate GAN loss for the discriminator

        Parameters:
            netD (network)      -- the discriminator D
            real (tensor array) -- real images
            fake (tensor array) -- images generated by a generator

        Return the discriminator loss.
        We also call loss_D.backward() to calculate the gradients.
        """
        # Real
        pred_real = DISC(real)
        loss_D_real = self.criterion_gan(pred_real, True)
        loss_D_real.backward()
        
        # Fake
        pred_fake = DISC(fake.detach())
        loss_D_fake = self.criterion_gan(pred_fake, False)
        loss_D_fake.backward()

        # Gradient Penalty
        if self.lambda_gp > 0.0:
            real_data = real.type(torch.FloatTensor).to(self.device).data
            fake_data = fake.type(torch.FloatTensor).to(self.device).data
            loss_gp = loss.cal_gradient_penalty(DISC, real_data, fake_data, self.device, 
                                                lambda_gp= self.lambda_gp)[0]
            loss_gp.backward()
        else:
            loss_gp = 0.0
        # Combined loss and calculate gradients
        loss_D = (loss_D_real + loss_D_fake)*0.5

        return loss_D, loss_gp

    def backward_DISC(self):
        """Calculate GAN loss for discriminator D_A"""
        loss_D, loss_gp = self.backward_DISC_basic(self.DISC, self.data, self.recon)

        self.loss_d_gan = loss_D 
        self.loss_gp = loss_gp

    def backward_AE(self):
        # Reconstruction loss
        self.loss_recon = self.criterion_recon(self.recon, self.data)* self.lambda_recon

        # GAN loss
        self.loss_g_gan = self.criterion_gan(self.DISC(self.recon), True)* self.lambda_gan 

        total_loss = self.loss_g_gan + self.loss_recon
        total_loss.backward(retain_graph=True)

    def optimize_parameters(self):
        """Calculate losses, gradients, and update network weights; called in every training iteration"""
        # forward
        self.forward()

        net_utils.set_requires_grad([self.DISC], True)
        self.optimizer_DISC.zero_grad() 
        self.backward_DISC()  
        self.optimizer_DISC.step() 

        net_utils.set_requires_grad([self.DISC], False)
        self.optimizer_AE.zero_grad() 
        self.backward_AE()  
        self.optimizer_AE.step()
